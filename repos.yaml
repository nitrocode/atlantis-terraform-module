# https://www.runatlantis.io/docs/server-configuration.html#repo-config-json
repos:
  - id: /.*/
    # allow repo level custom workflows
    # allow_custom_workflows: false
    # allow repo level configs to override the following
    # allowed_overrides:
    #   - apply_requirements
    #   - workflow
    apply_requirements:
      - mergeable
      - approved
    workflow: terraform

    pre_workflow_hooks:
      - description: Download policies
        commands: plan
        run: |
          # This will create dir /atlantis/policy/terraform-code
          cd /atlantis
          conftest pull "git::https://$GITHUB_TOKEN@github.com/<org>/<repo>//policies/"

    post_workflow_hooks:
      - description: Clean up old files
        commands: plan
        run: |
          last_accessed_weeks="2"
          dir_to_clean="$ATLANTIS_DATA_DIR/plugin-cache/registry.terraform.io"
          if [ -d "$ATLANTIS_DATA_DIR" ]; then
            echo "Clean up old files in directory $dir_to_clean not accessed in the last $last_accessed_weeks weeks"
            find \
              "$dir_to_clean" \
              -atime +$(($last_accessed_weeks*7)) \
              -type f \
              -delete \
              -print
            # clean up empty dirs
            find \
              "$dir_to_clean" \
              -mindepth 1 \
              -type d \
              -empty \
              -delete
          else
            echo "The directory $dir_to_clean does not exist so there isn't anything to clean up"
          fi

workflows:
  terraform:
    plan:
      steps:
        - env:
            name: TF_VAR_terraform_repository
            command: 'echo "github.com/${HEAD_REPO_OWNER}/${HEAD_REPO_NAME}"'
        - env:
            name: TF_VAR_terraform_repository_dir
            command: 'echo "${REPO_REL_DIR}"'
        - env:
            name: TF_VAR_terraform_version
            command: 'echo "${ATLANTIS_TERRAFORM_VERSION}"'
        # These env vars TF_AWS_DEFAULT_TAGS_ will work for aws provider 5.62.0+
        # https://github.com/hashicorp/terraform-provider-aws/releases/tag/v5.62.0
        - &env_default_tags_repository
          env:
            name: "TF_AWS_DEFAULT_TAGS_org:repository"
            command: 'echo "github.com/${HEAD_REPO_OWNER}/${HEAD_REPO_NAME}"'
        - &env_default_tags_repository_dir
          env:
            name: "TF_AWS_DEFAULT_TAGS_org:repository_dir"
            command: 'echo "${REPO_REL_DIR}"'
        # Add PR information to cloudtrail by appending the user agent
        - &env_append_user_agent
          env:
            name: TF_APPEND_USER_AGENT
            command: 'echo "pull:${PULL_URL//[^a-zA-Z0-9_@\.:\/-]/} author:${PULL_AUTHOR//[^a-zA-Z0-9-]/} actor:${USER_NAME//[^a-zA-Z0-9-]/}"'
        # https://developer.hashicorp.com/terraform/cli/config/environment-variables#tf_plugin_cache_dir
        - env:
            name: TF_PLUGIN_CACHE_MAY_BREAK_DEPENDENCY_LOCK_FILE
            command: 'echo true'
        # - env:
        #     name: TF_PLUGIN_CACHE_DIR
        #     command: 'echo "$HOME/.terraform.d/plugin-cache"'

        # - run: |
        #     mkdir -p $TF_PLUGIN_CACHE_DIR

        # This will clean up the terraform init output
        - run:
            command: terraform$ATLANTIS_TERRAFORM_VERSION init -input=false
            output: hide

        # verify terraform fmt has run without running format
        - run: |
            terraform$ATLANTIS_TERRAFORM_VERSION fmt -check -list=false
            exit_status=$?
            if [ $exit_status -gt 0 ]; then
              echo "Please run 'terraform fmt' in '${REPO_REL_DIR}'"
              exit $exit_status
            fi

        # use workspace if set
        - run: |
            if [[ ! -z "${WORKSPACE}" ]]; then
              terraform$ATLANTIS_TERRAFORM_VERSION workspace select ${WORKSPACE} || terraform$ATLANTIS_TERRAFORM_VERSION workspace new ${WORKSPACE}
            fi
            echo "Using ${WORKSPACE} workspace"

        # run conftest against terraform hcl code before init
        # The below will separate each terraform file with a new line in order to allow hcl2json to read it properly
        # If "hcl2json < *.tf" or "cat *.tf | hcl2json" is used, it will return "Missing newline after block definition"
        - run: |
            # check for terraform files
            if [ "$(ls | grep '\.tf$')" ]; then
                echo 'conftest --version' && conftest --version
                for f in *.tf; do (cat "${f}"; echo); done | hcl2json | conftest test --all-namespaces -p /atlantis/policy/terraform-code -
            fi

        - run: "echo 'terraform$ATLANTIS_TERRAFORM_VERSION --version' && terraform$ATLANTIS_TERRAFORM_VERSION --version"
        - run: "echo 'tfsec --version' && tfsec --version"
        # TODO: replace tfsec with trivy
        # use if adding a global tfsec file
        # - run: "tfsec --concise-output --config-file /etc/tfsec_config.yaml -m CRITICAL --no-color ."
        - run: "tfsec --concise-output -m CRITICAL --no-color ."
        - run: echo 'Running tflint...' && tflint
        - run: echo 'Running checkov...' && checkov -d .

        # plan
        - run: |
            export TF_APPEND_USER_AGENT="$TF_APPEND_USER_AGENT stage:plan workspace:${WORKSPACE}"
            # check if workspace and workspace.tfvars file exists, then append the argument
            TFVARS_ARG=""
            if [[ ! -z "${WORKSPACE}" ]] && [[ -f "${WORKSPACE}.tfvars" ]]; then
              echo "Found ${WORKSPACE}.tfvars and appending it to the terraform plan command"
              TFVARS_ARG="-var-file ${WORKSPACE}.tfvars"
            fi
            # COMMENT_ARGS need to be appended to support things like "-destroy": https://www.runatlantis.io/docs/custom-workflows#terragrunt
            terraform$ATLANTIS_TERRAFORM_VERSION plan -input=false $TFVARS_ARG $(printf '%s' $COMMENT_ARGS | sed 's/,/ /' | tr -d '\\') -refresh -out $PLANFILE

        # Cannot use "show" step for terraform 0.11 so we custom implement it in the next step
        # - show
        - run: |
            # Show file only exists for >= 0.12
            if [[ "$(echo $ATLANTIS_TERRAFORM_VERSION | cut -d'.' -f1,2)" == "0.11" ]]; then
              echo "Skipping tf-summarize since it requires tf12 or higher"
              exit 0
            fi

            # if [ ! -d "/tmp/$BASE_REPO_OWNER-$BASE_REPO_NAME-$PULL_NUM" ]; then
            #   mkdir -p /tmp/$BASE_REPO_OWNER-$BASE_REPO_NAME-$PULL_NUM
            # fi

            terraform$ATLANTIS_TERRAFORM_VERSION show -json $PLANFILE > $SHOWFILE
            echo 'tf-summarize -v' && tf-summarize -v
            cat $SHOWFILE | tf-summarize || true

    # policy_check:
    #   steps:
    #     - policy_check:
    #         extra_args: ["-p /atlantis/policy/terraform-plan", "--all-namespaces"]

  # custom workflow for authentication
  authenticated:
    apply:
      steps:
        - run: if [ `cat /home/atlantis/users | grep -i "^$USERNAME$" | wc -l` != 1 ]; then echo "Not in users file" && exit 1; else echo "Authenticated"; fi
        - apply
    plan:
      steps:
        - init
        - run: echo 'Running tflint...' && tflint
        - run: echo 'Running checkov...' && checkov -d .
        - plan
